import os
import json
import random
import uuid
from datetime import datetime, timedelta
from faker import Faker

fake = Faker("ru_RU")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (—É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
os.makedirs("data/stores", exist_ok=True)
os.makedirs("data/products", exist_ok=True)
os.makedirs("data/customers", exist_ok=True)
os.makedirs("data/purchases", exist_ok=True)


# --- 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ---
print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
categories = [
    "ü•ñ –ó–µ—Ä–Ω–æ–≤—ã–µ –∏ —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è",
    "ü•© –ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞ –∏ –±–æ–±–æ–≤—ã–µ",
    "ü•õ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "üçè –§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã",
    "ü•¶ –û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å"
]

store_networks = [("–ë–æ–ª—å—à–∞—è –ü–∏–∫—á–∞", 30), ("–ú–∞–ª–µ–Ω—å–∫–∞—è –ü–∏–∫—á–∞", 15)]
generated_stores = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π stores –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

for network, count in store_networks:
    for i in range(count):
        store_id = f"store-{len(generated_stores)+1:03}"
        city = fake.city()
        store = {
            "store_id": store_id,
            "store_name": f"{network} ‚Äî –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ {fake.street_name()}",
            "store_network": network,
            "store_type_description": f"{'–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –±–æ–ª–µ–µ 200 –∫–≤.–º.' if network == '–ë–æ–ª—å—à–∞—è –ü–∏–∫—á–∞' else '–ú–∞–≥–∞–∑–∏–Ω —É –¥–æ–º–∞ –º–µ–Ω–µ–µ 100 –∫–≤.–º.'} –í—Ö–æ–¥–∏—Ç –≤ —Å–µ—Ç—å –∏–∑ {count} –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
            "type": "offline",
            "categories": categories,
            "manager": {
                "name": fake.name(),
                "phone": fake.phone_number(),
                "email": fake.email()
            },
            "location": {
                "country": "–†–æ—Å—Å–∏—è",
                "city": city,
                "street": fake.street_name(),
                "house": str(fake.building_number()),
                "postal_code": fake.postcode(),
                "coordinates": {
                    "latitude": float(fake.latitude()),
                    "longitude": float(fake.longitude())
                }
            },
            "opening_hours": {
                "mon_fri": "09:00-21:00",
                "sat": "10:00-20:00",
                "sun": "10:00-18:00"
            },
            "accepts_online_orders": True,
            "delivery_available": True,
            "warehouse_connected": random.choice([True, False]),
            "last_inventory_date": datetime.now().strftime("%Y-%m-%d")
        }
        generated_stores.append(store)
        with open(f"data/stores/{store_id}.json", "w", encoding="utf-8") as f:
            json.dump(store, f, ensure_ascii=False, indent=2)
print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {len(generated_stores)}")


# --- 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ---
print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
generated_products = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π products –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
for i in range(50): # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 50 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    product = {
        "id": f"prd-{1000+i}",
        "name": fake.word().capitalize(),
        "group": random.choice(categories),
        "description": fake.sentence(),
        "kbju": {
            "calories": round(random.uniform(50, 300), 1),
            "protein": round(random.uniform(0.5, 20), 1),
            "fat": round(random.uniform(0.1, 15), 1),
            "carbohydrates": round(random.uniform(0.5, 50), 1)
        },
        "price": round(random.uniform(30, 700), 2), # –£–≤–µ–ª–∏—á–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        "unit": random.choice(["—à—Ç", "–∫–≥", "–ª"]), # –î–æ–±–∞–≤–∏–ª —Ä–∞–∑–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        "origin_country": fake.country(),
        "expiry_days": random.randint(5, 365),
        "is_organic": random.choice([True, False]),
        "barcode": fake.ean(length=13),
        "manufacturer": { # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            "name": fake.company(),
            "country": fake.country(),
            "website": f"https://{fake.domain_name()}",
            "inn": fake.bothify(text='##########')
        }
    }
    generated_products.append(product)
    with open(f"data/products/{product['id']}.json", "w", encoding="utf-8") as f:
        json.dump(product, f, ensure_ascii=False, indent=2)
print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(generated_products)}")


# --- 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ---
print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...")
generated_customers = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π customers –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å –ª–æ–∫–∞—Ü–∏–µ–π
for store in generated_stores:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–∞ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 3)
    num_customers_per_store = random.randint(1, 3)
    for _ in range(num_customers_per_store):
        customer_id = f"cus-{1000 + len(generated_customers):04}"
        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤ –ø—Ä–æ—à–ª–æ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏
        registration_date = (datetime.now() - timedelta(days=random.randint(30, 365 * 5))).isoformat()

        customer = {
            "customer_id": customer_id,
            "first_name": fake.first_name(),
            "last_name": fake.last_name(),
            "email": fake.email(),
            "phone": fake.phone_number(),
            "birth_date": fake.date_of_birth(minimum_age=18, maximum_age=70).isoformat(),
            "gender": random.choice(["male", "female"]),
            "registration_date": registration_date,
            "is_loyalty_member": random.choice([True, False]), # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            "loyalty_card_number": f"LOYAL-{uuid.uuid4().hex[:10].upper()}" if random.random() < 0.8 else None, # 80% –∏–º–µ—é—Ç –∫–∞—Ä—Ç—É
            "purchase_location": store["location"], # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ª–æ–∫–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
            "delivery_address": {
                "country": "–†–æ—Å—Å–∏—è",
                "city": store["location"]["city"],
                "street": fake.street_name(),
                "house": str(fake.building_number()),
                "apartment": str(random.randint(1, 100)),
                "postal_code": fake.postcode()
            },
            "preferences": {
                "preferred_language": "ru",
                "preferred_payment_method": random.choice(["card", "cash"]),
                "receive_promotions": random.choice([True, False])
            }
        }
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–µ-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if not customer["is_loyalty_member"]:
            customer["loyalty_card_number"] = None

        generated_customers.append(customer)
        with open(f"data/customers/{customer_id}.json", "w", encoding="utf-8") as f:
            json.dump(customer, f, ensure_ascii=False, indent=2)
print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {len(generated_customers)}")


# --- –ó–ê–ì–†–£–ó–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–ö–£–ü–û–ö ---
# –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏–ª–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–æ–∫

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
stores = []
stores_dir = "data/stores"
for filename in os.listdir(stores_dir):
    if filename.endswith(".json"):
        filepath = os.path.join(stores_dir, filename)
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                stores.append(json.load(f))
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞.")
        except UnicodeDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü–æ–ø—ã—Ç–∫–∞ —Å cp1251.")
            try:
                with open(filepath, "r", encoding="cp1251") as f:
                    stores.append(json.load(f))
            except Exception as ex:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filepath} –Ω–∏ —Å utf-8, –Ω–∏ —Å cp1251: {ex}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
products = []
products_dir = "data/products"
for filename in os.listdir(products_dir):
    if filename.endswith(".json"):
        filepath = os.path.join(products_dir, filename)
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                products.append(json.load(f))
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞.")
        except UnicodeDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü–æ–ø—ã—Ç–∫–∞ —Å cp1251.")
            try:
                with open(filepath, "r", encoding="cp1251") as f:
                    products.append(json.load(f))
            except Exception as ex:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filepath} –Ω–∏ —Å utf-8, –Ω–∏ —Å cp1251: {ex}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
customers = []
customers_dir = "data/customers"
for filename in os.listdir(customers_dir):
    if filename.endswith(".json"):
        filepath = os.path.join(customers_dir, filename)
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                customers.append(json.load(f))
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞.")
        except UnicodeDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ {filepath}: {e}. –ü–æ–ø—ã—Ç–∫–∞ —Å cp1251.")
            try:
                with open(filepath, "r", encoding="cp1251") as f:
                    customers.append(json.load(f))
            except Exception as ex:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filepath} –Ω–∏ —Å utf-8, –Ω–∏ —Å cp1251: {ex}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not stores:
    print("–í –ø–∞–ø–∫–µ 'data/stores' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    exit()
if not products:
    print("–í –ø–∞–ø–∫–µ 'data/products' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    exit()
if not customers:
    print("–í –ø–∞–ø–∫–µ 'data/customers' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    exit()

print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫:")
print(f"- –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {len(stores)}")
print(f"- –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
print(f"- –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {len(customers)}")

# === 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ ===
print("\n–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∫—É–ø–æ–∫...")
num_purchases = 500 # –£–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
for i in range(num_purchases):
    customer = random.choice(customers)
    store = random.choice(stores)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞
    if not products:
        print("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–æ–∫. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.")
        continue

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç ===
    customer_registration_str = customer.get("registration_date")

    if customer_registration_str:
        try:
            customer_registration_date = datetime.fromisoformat(customer_registration_str)
        except ValueError:
            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç registration_date –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {customer.get('customer_id')}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω–∞—è –¥–∞—Ç–∞.")
            customer_registration_date = datetime.now() - timedelta(days=365*2) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∞—Ç–∞, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    else:
        # –ï—Å–ª–∏ registration_date —Å–æ–≤—Å–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ
        customer_registration_date = datetime.now() - timedelta(days=365*3)

    now = datetime.now()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ customer_registration_date –Ω–µ –≤ –±—É–¥—É—â–µ–º
    if customer_registration_date > now:
        customer_registration_date = now - timedelta(days=random.randint(1,30)) # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º, —Å—Ç–∞–≤–∏–º –Ω–µ–¥–∞–≤–Ω—é—é

    time_difference = now - customer_registration_date # timedelta object

    # –ï—Å–ª–∏ customer_registration_date –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫ –∫ now, –∏–ª–∏ even future bug, time_difference can be negative or zero
    if time_difference.total_seconds() <= 0:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º purchase_datetime –∫–∞–∫ current_time - –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        purchase_datetime = now - timedelta(seconds=random.randint(60, 3600))
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ timedelta –º–µ–∂–¥—É 0 –∏ time_difference
        random_seconds = random.randint(0, int(time_difference.total_seconds()))
        purchase_datetime = customer_registration_date + timedelta(seconds=random_seconds)

    purchase_datetime_str = purchase_datetime.isoformat()

    # === –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ ===
    # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç 1 –¥–æ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    num_items_to_select = random.randint(1, min(5, len(products)))
    items = random.sample(products, k=num_items_to_select)

    purchase_items = []
    total = 0
    for item in items:
        qty = random.randint(1, 10) # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10
        total_price = round(item["price"] * qty, 2)
        total += total_price
        purchase_items.append({
            "product_id": item["id"],
            "name": item["name"],
            "category": item["group"],
            "quantity": qty,
            "unit": item["unit"],
            "price_per_unit": item["price"],
            "total_price": total_price,
            "kbju": item.get("kbju", {}),
            "manufacturer": item.get("manufacturer", None) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .get() –¥–ª—è manufacturer
        })

    if not purchase_items: # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ items –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        continue

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    is_loyalty_member = customer.get("is_loyalty_member", False)
    loyalty_card_number = customer.get("loyalty_card_number", None)


    purchase_id = f"ord-{i+1:05}"
    purchase = {
        "purchase_id": purchase_id,
        "customer": {
            "customer_id": customer["customer_id"],
            "first_name": customer["first_name"],
            "last_name": customer["last_name"],
            "email": customer.get("email"),
            "phone": customer.get("phone"),
            "is_loyalty_member": is_loyalty_member,
            "loyalty_card_number": loyalty_card_number,
        },
        "store": {
            "store_id": store["store_id"],
            "store_name": store["store_name"],
            "store_network": store["store_network"],
            "location": store["location"]
        },
        "items": purchase_items,
        "total_amount": round(total, 2),
        "payment_method": random.choice(["card", "cash", "online"]), # –î–æ–±–∞–≤–∏–º –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç—É
        "is_delivery": random.choice([True, False]),
        "delivery_address": customer.get("delivery_address") if random.random() < 0.5 else None, # 50% –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
        "purchase_datetime": purchase_datetime_str
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    with open(f"data/purchases/{purchase['purchase_id']}.json", "w", encoding="utf-8") as f:
        json.dump(purchase, f, ensure_ascii=False, indent=2)

print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_purchases} –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
